Software Requirements Specification (SRS)
1. Introduction
1.1 Purpose
The purpose of Udaibudy is to provide users with a curated platform to explore hidden gems in Udaipur, Rajasthan. These may include offbeat cafes, lesser-known lakes, scenic viewpoints, cultural experiences, and more. The platform aims to help both locals and tourists discover the unexplored charm of the city.
1.2 Scope
Udaibudy will be a mobile-first web application (expandable to mobile app) that:
•	Lists verified hidden spots in Udaipur
•	Allows user reviews, ratings, and contributions
•	Offers GPS-based exploration
•	Curates itineraries for custom experiences
1.3 Definitions, Acronyms, and Abbreviations
•	POI: Point of Interest
•	UI: User Interface
•	UX: User Experience
•	Admin Panel: Backend interface for managing listings
________________________________________
2. Overall Description
2.1 Product Perspective
Udaibudy is an independent system. It may later integrate with Google Maps, travel APIs, or social platforms for enhanced features.
2.2 Product Functions
•	Discover POIs (cafes, lakes, culture spots)
•	Search and filter by categories (food, nature, etc.)
•	Map integration for navigation
•	User-generated reviews & images
•	Admin panel for content moderation
2.3 User Classes and Characteristics
•	Visitors/Tourists: Explore unknown spots
•	Locals: Contribute and discover lesser-known places
•	Admins: Moderate content and manage listings
2.4 Operating Environment
•	Responsive web app (HTML5, CSS3, JS framework like React or Vue)
•	Backend server (Node.js / Django / etc.)
•	Database (MongoDB / PostgreSQL)
2.5 Design and Implementation Constraints
•	Must be responsive on mobile devices
•	Scalable backend for future expansion
•	GDPR & data privacy compliance
2.6 Assumptions and Dependencies
•	Requires internet access
•	Uses third-party map services (e.g., Google Maps)
•	Initial POI data will be manually curated
________________________________________
3. Specific Requirements
3.1 Functional Requirements
3.1.1 User Features
•	FR1: User can browse a list of hidden places
•	FR2: User can filter/search by category or rating
•	FR3: User can view detailed POI pages with images, map, and reviews
•	FR4: User can submit new POIs (pending approval)
•	FR5: User can leave reviews and rate locations
•	FR6: User can save/bookmark favorite places
3.1.2 Admin Features
•	FR7: Admin can add/edit/delete POIs
•	FR8: Admin can moderate reviews and user submissions
•	FR9: Admin can feature or highlight specific listings
________________________________________
3.2 Non-Functional Requirements
•	NFR1: App should load within 3 seconds on 4G
•	NFR2: Support minimum screen size of 360px width
•	NFR3: Backend should support at least 10,000 daily active users
•	NFR4: System uptime of 99.5%
________________________________________
3.3 User Interface Requirements
•	Simple, visual UI with card-based layouts
•	Home screen: Featured categories and POIs
•	POI Detail Page: Title, images, description, map, reviews
•	Admin panel: Tabular listing management
________________________________________
3.4 External Interface Requirements
•	Integration with:
o	Google Maps API
o	Social Login (Google/Facebook)
o	Email notification system (e.g., SendGrid)
________________________________________
4. Appendix
•	Future features (planned):
o	AI itinerary planner
o	Offline maps
o	Community forums
•	Development Tools:
o	Figma for UI/UX design
o	GitHub for version control

